from typing import Any, Optional

from pymongo import client_session as client_session
from pymongo import common as common
from pymongo import database as database
from pymongo import helpers as helpers
from pymongo import message as message
from pymongo import periodic_executor as periodic_executor
from pymongo import uri_parser as uri_parser
from pymongo.change_stream import ClusterChangeStream as ClusterChangeStream
from pymongo.client_options import ClientOptions as ClientOptions
from pymongo.command_cursor import CommandCursor as CommandCursor
from pymongo.cursor_manager import CursorManager as CursorManager
from pymongo.errors import AutoReconnect as AutoReconnect
from pymongo.errors import BulkWriteError as BulkWriteError
from pymongo.errors import ConfigurationError as ConfigurationError
from pymongo.errors import ConnectionFailure as ConnectionFailure
from pymongo.errors import InvalidOperation as InvalidOperation
from pymongo.errors import NetworkTimeout as NetworkTimeout
from pymongo.errors import NotMasterError as NotMasterError
from pymongo.errors import OperationFailure as OperationFailure
from pymongo.errors import PyMongoError as PyMongoError
from pymongo.errors import ServerSelectionTimeoutError as ServerSelectionTimeoutError
from pymongo.read_preferences import ReadPreference as ReadPreference
from pymongo.server_selectors import writable_preferred_server_selector as writable_preferred_server_selector
from pymongo.server_selectors import writable_server_selector as writable_server_selector
from pymongo.server_type import SERVER_TYPE as SERVER_TYPE
from pymongo.settings import TopologySettings as TopologySettings
from pymongo.topology import Topology as Topology
from pymongo.topology_description import TOPOLOGY_TYPE as TOPOLOGY_TYPE
from pymongo.write_concern import DEFAULT_WRITE_CONCERN as DEFAULT_WRITE_CONCERN

class MongoClient(common.BaseObject):
    HOST: str = ...
    PORT: int = ...
    def __init__(
        self,
        host: Optional[Any] = ...,
        port: Optional[Any] = ...,
        document_class: Any = ...,
        tz_aware: Optional[Any] = ...,
        connect: Optional[Any] = ...,
        type_registry: Optional[Any] = ...,
        **kwargs: Any,
    ): ...
    def watch(
        self,
        pipeline: Optional[Any] = ...,
        full_document: Optional[Any] = ...,
        resume_after: Optional[Any] = ...,
        max_await_time_ms: Optional[Any] = ...,
        batch_size: Optional[Any] = ...,
        collation: Optional[Any] = ...,
        start_at_operation_time: Optional[Any] = ...,
        session: Optional[Any] = ...,
        start_after: Optional[Any] = ...,
    ): ...
    @property
    def event_listeners(self): ...
    @property
    def address(self): ...
    @property
    def primary(self): ...
    @property
    def secondaries(self): ...
    @property
    def arbiters(self): ...
    @property
    def is_primary(self): ...
    @property
    def is_mongos(self): ...
    @property
    def max_pool_size(self): ...
    @property
    def min_pool_size(self): ...
    @property
    def max_idle_time_ms(self): ...
    @property
    def nodes(self): ...
    @property
    def max_bson_size(self): ...
    @property
    def max_message_size(self): ...
    @property
    def max_write_batch_size(self): ...
    @property
    def local_threshold_ms(self): ...
    @property
    def server_selection_timeout(self): ...
    @property
    def retry_writes(self): ...
    @property
    def retry_reads(self): ...
    def close(self) -> None: ...
    def set_cursor_manager(self, manager_class: Any) -> None: ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
    def __getattr__(self, name: Any): ...
    def __getitem__(self, name: Any) -> database.Database: ...
    def close_cursor(self, cursor_id: Any, address: Optional[Any] = ...) -> None: ...
    def kill_cursors(self, cursor_ids: Any, address: Optional[Any] = ...) -> None: ...
    def start_session(self, causal_consistency: bool = ..., default_transaction_options: Optional[Any] = ...): ...
    def server_info(self, session: Optional[Any] = ...): ...
    def list_databases(self, session: Optional[Any] = ..., **kwargs: Any): ...
    def list_database_names(self, session: Optional[Any] = ...): ...
    def database_names(self, session: Optional[Any] = ...): ...
    def drop_database(self, name_or_database: Any, session: Optional[Any] = ...) -> None: ...
    def get_default_database(
        self,
        default: Optional[Any] = ...,
        codec_options: Optional[Any] = ...,
        read_preference: Optional[Any] = ...,
        write_concern: Optional[Any] = ...,
        read_concern: Optional[Any] = ...,
    ): ...
    def get_database(
        self,
        name: Optional[Any] = ...,
        codec_options: Optional[Any] = ...,
        read_preference: Optional[Any] = ...,
        write_concern: Optional[Any] = ...,
        read_concern: Optional[Any] = ...,
    ): ...
    @property
    def is_locked(self): ...
    def fsync(self, **kwargs: Any) -> None: ...
    def unlock(self, session: Optional[Any] = ...) -> None: ...
    def __enter__(self): ...
    def __exit__(self, exc_type: Any, exc_val: Any, exc_tb: Any) -> None: ...
    def __iter__(self) -> Any: ...
    def __next__(self) -> None: ...
    next: Any = ...

class _MongoClientErrorHandler:
    def __init__(self, client: Any, server_address: Any, session: Any) -> None: ...
    def contribute_socket(self, sock_info: Any) -> None: ...
    def __enter__(self): ...
    def __exit__(self, exc_type: Any, exc_val: Any, exc_tb: Any) -> None: ...
