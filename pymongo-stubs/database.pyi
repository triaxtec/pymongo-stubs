from typing import Any, Optional

from pymongo import auth as auth
from pymongo import common as common
from pymongo.change_stream import DatabaseChangeStream as DatabaseChangeStream
from pymongo.collection import Collection
from pymongo.command_cursor import CommandCursor as CommandCursor
from pymongo.errors import CollectionInvalid as CollectionInvalid
from pymongo.errors import ConfigurationError as ConfigurationError
from pymongo.errors import InvalidName as InvalidName
from pymongo.errors import OperationFailure as OperationFailure
from pymongo.read_preferences import ReadPreference as ReadPreference
from pymongo.son_manipulator import SONManipulator as SONManipulator
from pymongo.write_concern import DEFAULT_WRITE_CONCERN as DEFAULT_WRITE_CONCERN

class Database(common.BaseObject):
    def __init__(
        self,
        client: Any,
        name: Any,
        codec_options: Optional[Any] = ...,
        read_preference: Optional[Any] = ...,
        write_concern: Optional[Any] = ...,
        read_concern: Optional[Any] = ...,
    ) -> None: ...
    def add_son_manipulator(self, manipulator: Any): ...
    @property
    def system_js(self): ...
    @property
    def client(self): ...
    @property
    def name(self): ...
    @property
    def incoming_manipulators(self): ...
    @property
    def incoming_copying_manipulators(self): ...
    @property
    def outgoing_manipulators(self): ...
    @property
    def outgoing_copying_manipulators(self): ...
    def with_options(
        self,
        codec_options: Optional[Any] = ...,
        read_preference: Optional[Any] = ...,
        write_concern: Optional[Any] = ...,
        read_concern: Optional[Any] = ...,
    ): ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
    def __getattr__(self, name: Any): ...
    def __getitem__(self, name: Any) -> Collection: ...
    def get_collection(
        self,
        name: Any,
        codec_options: Optional[Any] = ...,
        read_preference: Optional[Any] = ...,
        write_concern: Optional[Any] = ...,
        read_concern: Optional[Any] = ...,
    ): ...
    def create_collection(
        self,
        name: Any,
        codec_options: Optional[Any] = ...,
        read_preference: Optional[Any] = ...,
        write_concern: Optional[Any] = ...,
        read_concern: Optional[Any] = ...,
        session: Optional[Any] = ...,
        **kwargs: Any,
    ): ...
    def aggregate(self, pipeline: Any, session: Optional[Any] = ..., **kwargs: Any): ...
    def watch(
        self,
        pipeline: Optional[Any] = ...,
        full_document: Optional[Any] = ...,
        resume_after: Optional[Any] = ...,
        max_await_time_ms: Optional[Any] = ...,
        batch_size: Optional[Any] = ...,
        collation: Optional[Any] = ...,
        start_at_operation_time: Optional[Any] = ...,
        session: Optional[Any] = ...,
        start_after: Optional[Any] = ...,
    ): ...
    def command(
        self,
        command: Any,
        value: int = ...,
        check: bool = ...,
        allowable_errors: Optional[Any] = ...,
        read_preference: Optional[Any] = ...,
        codec_options: Any = ...,
        session: Optional[Any] = ...,
        **kwargs: Any,
    ): ...
    def list_collections(self, session: Optional[Any] = ..., filter: Optional[Any] = ..., **kwargs: Any): ...
    def list_collection_names(self, session: Optional[Any] = ..., filter: Optional[Any] = ..., **kwargs: Any): ...
    def collection_names(self, include_system_collections: bool = ..., session: Optional[Any] = ...): ...
    def drop_collection(self, name_or_collection: Any, session: Optional[Any] = ...): ...
    def validate_collection(
        self, name_or_collection: Any, scandata: bool = ..., full: bool = ..., session: Optional[Any] = ...
    ): ...
    def current_op(self, include_all: bool = ..., session: Optional[Any] = ...): ...
    def profiling_level(self, session: Optional[Any] = ...): ...
    def set_profiling_level(self, level: Any, slow_ms: Optional[Any] = ..., session: Optional[Any] = ...) -> None: ...
    def profiling_info(self, session: Optional[Any] = ...): ...
    def error(self): ...
    def last_status(self): ...
    def previous_error(self): ...
    def reset_error_history(self) -> None: ...
    def __iter__(self) -> Any: ...
    def __next__(self) -> None: ...
    next: Any = ...
    def add_user(
        self,
        name: Any,
        password: Optional[Any] = ...,
        read_only: Optional[Any] = ...,
        session: Optional[Any] = ...,
        **kwargs: Any,
    ) -> None: ...
    def remove_user(self, name: Any, session: Optional[Any] = ...) -> None: ...
    def authenticate(
        self,
        name: Optional[Any] = ...,
        password: Optional[Any] = ...,
        source: Optional[Any] = ...,
        mechanism: str = ...,
        **kwargs: Any,
    ): ...
    def logout(self) -> None: ...
    def dereference(self, dbref: Any, session: Optional[Any] = ..., **kwargs: Any): ...
    def eval(self, code: Any, *args: Any): ...
    def __call__(self, *args: Any, **kwargs: Any) -> None: ...

class SystemJS:
    def __init__(self, database: Any) -> None: ...
    def __setattr__(self, name: Any, code: Any) -> None: ...
    def __setitem__(self, name: Any, code: Any) -> None: ...
    def __delattr__(self, name: Any) -> None: ...
    def __delitem__(self, name: Any) -> None: ...
    def __getattr__(self, name: Any): ...
    def __getitem__(self, name: Any): ...
    def list(self): ...
