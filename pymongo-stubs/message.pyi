from typing import Any, Optional

from bson import decode as decode
from pymongo.errors import ConfigurationError as ConfigurationError
from pymongo.errors import CursorNotFound as CursorNotFound
from pymongo.errors import DocumentTooLarge as DocumentTooLarge
from pymongo.errors import ExecutionTimeout as ExecutionTimeout
from pymongo.errors import InvalidOperation as InvalidOperation
from pymongo.errors import NotMasterError as NotMasterError
from pymongo.errors import OperationFailure as OperationFailure
from pymongo.errors import ProtocolError as ProtocolError
from pymongo.read_concern import DEFAULT_READ_CONCERN as DEFAULT_READ_CONCERN
from pymongo.read_preferences import ReadPreference as ReadPreference
from pymongo.write_concern import WriteConcern as WriteConcern

MAX_INT32: int
MIN_INT32: int

class _Query:
    exhaust_mgr: Any = ...
    cursor_id: Any = ...
    flags: Any = ...
    db: Any = ...
    coll: Any = ...
    ntoskip: Any = ...
    spec: Any = ...
    fields: Any = ...
    codec_options: Any = ...
    read_preference: Any = ...
    read_concern: Any = ...
    limit: Any = ...
    batch_size: Any = ...
    collation: Any = ...
    session: Any = ...
    client: Any = ...
    name: str = ...
    def __init__(
        self,
        flags: Any,
        db: Any,
        coll: Any,
        ntoskip: Any,
        spec: Any,
        fields: Any,
        codec_options: Any,
        read_preference: Any,
        limit: Any,
        batch_size: Any,
        read_concern: Any,
        collation: Any,
        session: Any,
        client: Any,
    ) -> None: ...
    def namespace(self): ...
    def use_command(self, sock_info: Any, exhaust: Any): ...
    def as_command(self, sock_info: Any): ...
    def get_message(self, set_slave_ok: Any, sock_info: Any, use_cmd: bool = ...): ...

class _GetMore:
    name: str = ...
    db: Any = ...
    coll: Any = ...
    ntoreturn: Any = ...
    cursor_id: Any = ...
    codec_options: Any = ...
    read_preference: Any = ...
    session: Any = ...
    client: Any = ...
    max_await_time_ms: Any = ...
    exhaust_mgr: Any = ...
    def __init__(
        self,
        db: Any,
        coll: Any,
        ntoreturn: Any,
        cursor_id: Any,
        codec_options: Any,
        read_preference: Any,
        session: Any,
        client: Any,
        max_await_time_ms: Any,
        exhaust_mgr: Any,
    ) -> None: ...
    def namespace(self): ...
    def use_command(self, sock_info: Any, exhaust: Any): ...
    def as_command(self, sock_info: Any): ...
    def get_message(self, dummy0: Any, sock_info: Any, use_cmd: bool = ...): ...

class _RawBatchQuery(_Query):
    def use_command(self, socket_info: Any, exhaust: Any): ...
    def get_message(self, set_slave_ok: Any, sock_info: Any, use_cmd: bool = ...): ...

class _RawBatchGetMore(_GetMore):
    def use_command(self, socket_info: Any, exhaust: Any): ...
    def get_message(self, set_slave_ok: Any, sock_info: Any, use_cmd: bool = ...): ...

class _CursorAddress(tuple):
    def __new__(cls, address: Any, namespace: Any): ...
    @property
    def namespace(self): ...
    def __hash__(self) -> Any: ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...

def insert(
    collection_name: Any,
    docs: Any,
    check_keys: Any,
    safe: Any,
    last_error_args: Any,
    continue_on_error: Any,
    opts: Any,
    ctx: Optional[Any] = ...,
): ...
def update(
    collection_name: Any,
    upsert: Any,
    multi: Any,
    spec: Any,
    doc: Any,
    safe: Any,
    last_error_args: Any,
    check_keys: Any,
    opts: Any,
    ctx: Optional[Any] = ...,
): ...
def query(
    options: Any,
    collection_name: Any,
    num_to_skip: Any,
    num_to_return: Any,
    query: Any,
    field_selector: Any,
    opts: Any,
    check_keys: bool = ...,
    ctx: Optional[Any] = ...,
): ...
def get_more(collection_name: Any, num_to_return: Any, cursor_id: Any, ctx: Optional[Any] = ...): ...
def delete(
    collection_name: Any,
    spec: Any,
    safe: Any,
    last_error_args: Any,
    opts: Any,
    flags: int = ...,
    ctx: Optional[Any] = ...,
): ...
def kill_cursors(cursor_ids: Any): ...

class _BulkWriteContext:
    db_name: Any = ...
    command: Any = ...
    sock_info: Any = ...
    op_id: Any = ...
    listeners: Any = ...
    publish: Any = ...
    name: Any = ...
    field: Any = ...
    start_time: Any = ...
    session: Any = ...
    compress: Any = ...
    op_type: Any = ...
    codec: Any = ...
    def __init__(
        self,
        database_name: Any,
        command: Any,
        sock_info: Any,
        operation_id: Any,
        listeners: Any,
        session: Any,
        op_type: Any,
        codec: Any,
    ) -> None: ...
    def execute(self, docs: Any, client: Any): ...
    def execute_unack(self, docs: Any, client: Any): ...
    @property
    def check_keys(self): ...
    @property
    def max_bson_size(self): ...
    @property
    def max_message_size(self): ...
    @property
    def max_write_batch_size(self): ...
    @property
    def max_split_size(self): ...
    def legacy_bulk_insert(
        self, request_id: Any, msg: Any, max_doc_size: Any, acknowledged: Any, docs: Any, compress: Any
    ): ...
    def legacy_write(self, request_id: Any, msg: Any, max_doc_size: Any, acknowledged: Any, docs: Any): ...
    def write_command(self, request_id: Any, msg: Any, docs: Any): ...

class _EncryptedBulkWriteContext(_BulkWriteContext):
    def execute(self, docs: Any, client: Any): ...
    def execute_unack(self, docs: Any, client: Any): ...
    @property
    def max_split_size(self): ...

class _OpReply:
    UNPACK_FROM: Any = ...
    OP_CODE: int = ...
    flags: Any = ...
    cursor_id: Any = ...
    number_returned: Any = ...
    documents: Any = ...
    def __init__(self, flags: Any, cursor_id: Any, number_returned: Any, documents: Any) -> None: ...
    def raw_response(self, cursor_id: Optional[Any] = ...): ...
    def unpack_response(
        self,
        cursor_id: Optional[Any] = ...,
        codec_options: Any = ...,
        user_fields: Optional[Any] = ...,
        legacy_response: bool = ...,
    ): ...
    def command_response(self): ...
    def raw_command_response(self) -> None: ...
    @classmethod
    def unpack(cls, msg: Any): ...

class _OpMsg:
    UNPACK_FROM: Any = ...
    OP_CODE: int = ...
    flags: Any = ...
    payload_document: Any = ...
    def __init__(self, flags: Any, payload_document: Any) -> None: ...
    def raw_response(self, cursor_id: Optional[Any] = ...) -> None: ...
    def unpack_response(
        self,
        cursor_id: Optional[Any] = ...,
        codec_options: Any = ...,
        user_fields: Optional[Any] = ...,
        legacy_response: bool = ...,
    ): ...
    def command_response(self): ...
    def raw_command_response(self): ...
    @classmethod
    def unpack(cls, msg: Any): ...
