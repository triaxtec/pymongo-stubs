from typing import Any, Optional

from pymongo import common as common
from pymongo.errors import ConfigurationError as ConfigurationError
from pymongo.read_preferences import ReadPreference as ReadPreference
from pymongo.server_description import ServerDescription as ServerDescription
from pymongo.server_selectors import Selection as Selection
from pymongo.server_type import SERVER_TYPE as SERVER_TYPE

TOPOLOGY_TYPE: Any
SRV_POLLING_TOPOLOGIES: Any

class TopologyDescription:
    def __init__(
        self,
        topology_type: Any,
        server_descriptions: Any,
        replica_set_name: Any,
        max_set_version: Any,
        max_election_id: Any,
        topology_settings: Any,
    ) -> None: ...
    def check_compatible(self) -> None: ...
    def has_server(self, address: Any): ...
    def reset_server(self, address: Any): ...
    def reset(self): ...
    def server_descriptions(self): ...
    @property
    def topology_type(self): ...
    @property
    def topology_type_name(self): ...
    @property
    def replica_set_name(self): ...
    @property
    def max_set_version(self): ...
    @property
    def max_election_id(self): ...
    @property
    def logical_session_timeout_minutes(self): ...
    @property
    def known_servers(self): ...
    @property
    def has_known_servers(self): ...
    @property
    def readable_servers(self): ...
    @property
    def common_wire_version(self): ...
    @property
    def heartbeat_frequency(self): ...
    def apply_selector(self, selector: Any, address: Any, custom_selector: Optional[Any] = ...): ...
    def has_readable_server(self, read_preference: Any = ...): ...
    def has_writable_server(self): ...

def updated_topology_description(topology_description: Any, server_description: Any): ...
