from typing import Any, Optional

from bson.py3compat import abc
from pymongo.auth import MECHANISMS as MECHANISMS
from pymongo.compression_support import validate_compressors as validate_compressors
from pymongo.compression_support import validate_zlib_compression_level as validate_zlib_compression_level
from pymongo.driver_info import DriverInfo as DriverInfo
from pymongo.encryption_options import validate_auto_encryption_opts_or_none as validate_auto_encryption_opts_or_none
from pymongo.errors import ConfigurationError as ConfigurationError
from pymongo.read_concern import ReadConcern as ReadConcern
from pymongo.ssl_support import validate_allow_invalid_certs as validate_allow_invalid_certs
from pymongo.ssl_support import validate_cert_reqs as validate_cert_reqs
from pymongo.write_concern import DEFAULT_WRITE_CONCERN as DEFAULT_WRITE_CONCERN
from pymongo.write_concern import WriteConcern as WriteConcern

ORDERED_TYPES: Any
MAX_BSON_SIZE: Any
MAX_MESSAGE_SIZE: Any
MIN_WIRE_VERSION: int
MAX_WIRE_VERSION: int
MAX_WRITE_BATCH_SIZE: int
MIN_SUPPORTED_SERVER_VERSION: str
MIN_SUPPORTED_WIRE_VERSION: int
MAX_SUPPORTED_WIRE_VERSION: int
HEARTBEAT_FREQUENCY: int
KILL_CURSOR_FREQUENCY: int
EVENTS_QUEUE_FREQUENCY: int
SERVER_SELECTION_TIMEOUT: int
MIN_HEARTBEAT_INTERVAL: float
MIN_SRV_RESCAN_INTERVAL: int
CONNECT_TIMEOUT: float
MAX_POOL_SIZE: int
MIN_POOL_SIZE: int
MAX_IDLE_TIME_MS: Any
MAX_IDLE_TIME_SEC: Any
WAIT_QUEUE_TIMEOUT: Any
LOCAL_THRESHOLD_MS: int
RETRY_WRITES: bool
RETRY_READS: bool
COMMAND_NOT_FOUND_CODES: Any
UNAUTHORIZED_CODES: Any

def partition_node(node: Any): ...
def clean_node(node: Any): ...
def raise_config_error(key: Any, dummy: Any) -> None: ...
def validate_boolean(option: Any, value: Any): ...
def validate_boolean_or_string(option: Any, value: Any): ...
def validate_integer(option: Any, value: Any): ...
def validate_positive_integer(option: Any, value: Any): ...
def validate_non_negative_integer(option: Any, value: Any): ...
def validate_readable(option: Any, value: Any): ...
def validate_positive_integer_or_none(option: Any, value: Any): ...
def validate_non_negative_integer_or_none(option: Any, value: Any): ...
def validate_string(option: Any, value: Any): ...
def validate_string_or_none(option: Any, value: Any): ...
def validate_int_or_basestring(option: Any, value: Any): ...
def validate_non_negative_int_or_basestring(option: Any, value: Any): ...
def validate_positive_float(option: Any, value: Any): ...
def validate_positive_float_or_zero(option: Any, value: Any): ...
def validate_timeout_or_none(option: Any, value: Any): ...
def validate_timeout_or_zero(option: Any, value: Any): ...
def validate_max_staleness(option: Any, value: Any): ...
def validate_read_preference(dummy: Any, value: Any): ...
def validate_read_preference_mode(dummy: Any, value: Any): ...
def validate_auth_mechanism(option: Any, value: Any): ...
def validate_uuid_representation(dummy: Any, value: Any): ...
def validate_read_preference_tags(name: Any, value: Any): ...
def validate_auth_mechanism_properties(option: Any, value: Any): ...
def validate_document_class(option: Any, value: Any): ...
def validate_type_registry(option: Any, value: Any): ...
def validate_list(option: Any, value: Any): ...
def validate_list_or_none(option: Any, value: Any): ...
def validate_list_or_mapping(option: Any, value: Any) -> None: ...
def validate_is_mapping(option: Any, value: Any) -> None: ...
def validate_is_document_type(option: Any, value: Any) -> None: ...
def validate_appname_or_none(option: Any, value: Any): ...
def validate_driver_or_none(option: Any, value: Any): ...
def validate_is_callable_or_none(option: Any, value: Any): ...
def validate_ok_for_replace(replacement: Any) -> None: ...
def validate_ok_for_update(update: Any) -> None: ...
def validate_unicode_decode_error_handler(dummy: Any, value: Any): ...
def validate_tzinfo(dummy: Any, value: Any): ...

URI_OPTIONS_ALIAS_MAP: Any
URI_OPTIONS_VALIDATOR_MAP: Any
NONSPEC_OPTIONS_VALIDATOR_MAP: Any
KW_VALIDATORS: Any
INTERNAL_URI_OPTION_NAME_MAP: Any
URI_OPTIONS_DEPRECATION_MAP: Any
VALIDATORS: Any
TIMEOUT_OPTIONS: Any

def validate_auth_option(option: Any, value: Any): ...
def validate(option: Any, value: Any): ...
def get_validated_options(options: Any, warn: bool = ...): ...

WRITE_CONCERN_OPTIONS: Any

class BaseObject:
    def __init__(self, codec_options: Any, read_preference: Any, write_concern: Any, read_concern: Any) -> None: ...
    @property
    def codec_options(self): ...
    @property
    def write_concern(self): ...
    @property
    def read_preference(self): ...
    @property
    def read_concern(self): ...

class _CaseInsensitiveDictionary(abc.MutableMapping):
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def __contains__(self, key: Any): ...
    def __len__(self): ...
    def __iter__(self) -> Any: ...
    def __setitem__(self, key: Any, value: Any) -> None: ...
    def __getitem__(self, key: Any): ...
    def __delitem__(self, key: Any) -> None: ...
    def __eq__(self, other: Any) -> Any: ...
    def get(self, key: Any, default: Optional[Any] = ...): ...
    def pop(self, key: Any, *args: Any, **kwargs: Any): ...
    def popitem(self): ...
    def clear(self) -> None: ...
    def setdefault(self, key: Any, default: Optional[Any] = ...): ...
    def update(self, other: Any) -> None: ...
    def cased_key(self, key: Any): ...
