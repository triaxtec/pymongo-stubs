import collections
from typing import Any, Optional, Callable

from pymongo import monotonic as monotonic
from pymongo.errors import ConfigurationError as ConfigurationError
from pymongo.errors import ConnectionFailure as ConnectionFailure
from pymongo.errors import InvalidOperation as InvalidOperation
from pymongo.errors import OperationFailure as OperationFailure
from pymongo.errors import PyMongoError as PyMongoError
from pymongo.errors import ServerSelectionTimeoutError as ServerSelectionTimeoutError
from pymongo.errors import WTimeoutError as WTimeoutError
from pymongo.read_concern import ReadConcern as ReadConcern
from pymongo.read_preferences import ReadPreference as ReadPreference
from pymongo.write_concern import WriteConcern as WriteConcern

class SessionOptions:
    def __init__(self, causal_consistency: bool = ..., default_transaction_options: Optional[TransactionOptions] = ...) -> None: ...
    @property
    def causal_consistency(self): ...
    @property
    def default_transaction_options(self): ...

class TransactionOptions:
    def __init__(
        self,
        read_concern: Optional[ReadConcern] = ...,
        write_concern: Optional[WriteConcern] = ...,
        read_preference: Optional[ReadPreference] = ...,
        max_commit_time_ms: Optional[Any] = ...,
    ) -> None: ...
    @property
    def read_concern(self) -> ReadConcern: ...
    @property
    def write_concern(self) -> WriteConcern: ...
    @property
    def read_preference(self) -> ReadPreference: ...
    @property
    def max_commit_time_ms(self): ...

class _TransactionContext:
    def __init__(self, session: Any) -> None: ...
    def __enter__(self): ...
    def __exit__(self, exc_type: Any, exc_val: Any, exc_tb: Any) -> None: ...

class _TxnState:
    NONE: int = ...
    STARTING: int = ...
    IN_PROGRESS: int = ...
    COMMITTED: int = ...
    COMMITTED_EMPTY: int = ...
    ABORTED: int = ...

class _Transaction:
    opts: Any = ...
    state: Any = ...
    sharded: bool = ...
    pinned_address: Any = ...
    recovery_token: Any = ...
    def __init__(self, opts: Any) -> None: ...
    def active(self): ...
    def reset(self) -> None: ...

class ClientSession:
    def __init__(self, client: Any, server_session: Any, options: Any, authset: Any, implicit: Any) -> None: ...
    def end_session(self) -> None: ...
    def __enter__(self): ...
    def __exit__(self, exc_type: Any, exc_val: Any, exc_tb: Any) -> None: ...
    @property
    def client(self): ...
    @property
    def options(self): ...
    @property
    def session_id(self): ...
    @property
    def cluster_time(self): ...
    @property
    def operation_time(self): ...
    def with_transaction(
        self,
        callback: Callable[[ClientSession], Any],
        read_concern: Optional[ReadConcern] = ...,
        write_concern: Optional[WriteConcern] = ...,
        read_preference: Optional[ReadPreference] = ...,
        max_commit_time_ms: Optional[Any] = ...,
    ) -> Callable[[ClientSession], Any]: ...
    def start_transaction(
        self,
        read_concern: Optional[Any] = ...,
        write_concern: Optional[Any] = ...,
        read_preference: Optional[Any] = ...,
        max_commit_time_ms: Optional[Any] = ...,
    ): ...
    def commit_transaction(self) -> None: ...
    def abort_transaction(self) -> None: ...
    def advance_cluster_time(self, cluster_time: Any) -> None: ...
    def advance_operation_time(self, operation_time: Any) -> None: ...
    @property
    def has_ended(self): ...
    @property
    def in_transaction(self): ...

class _ServerSession:
    session_id: Any = ...
    last_use: Any = ...
    dirty: bool = ...
    pool_id: Any = ...
    def __init__(self, pool_id: Any) -> None: ...
    def mark_dirty(self) -> None: ...
    def timed_out(self, session_timeout_minutes: Any): ...
    @property
    def transaction_id(self): ...
    def inc_transaction_id(self) -> None: ...

class _ServerSessionPool(collections.deque):
    pool_id: int = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def reset(self) -> None: ...
    def pop_all(self): ...
    def get_server_session(self, session_timeout_minutes: Any): ...
    def return_server_session(self, server_session: Any, session_timeout_minutes: Any) -> None: ...
    def return_server_session_no_lock(self, server_session: Any) -> None: ...
