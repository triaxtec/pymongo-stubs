from typing import Any, Optional

from pymongo import helpers as helpers
from pymongo.collation import validate_collation_or_none as validate_collation_or_none
from pymongo.common import validate_boolean as validate_boolean
from pymongo.common import validate_is_mapping as validate_is_mapping
from pymongo.errors import ConnectionFailure as ConnectionFailure
from pymongo.errors import InvalidOperation as InvalidOperation
from pymongo.errors import NotMasterError as NotMasterError
from pymongo.errors import OperationFailure as OperationFailure
from pymongo.monitoring import ConnectionClosedReason as ConnectionClosedReason

class CursorType:
    NON_TAILABLE: int = ...
    TAILABLE: Any = ...
    TAILABLE_AWAIT: Any = ...
    EXHAUST: Any = ...

class _SocketManager:
    sock: Any = ...
    pool: Any = ...
    def __init__(self, sock: Any, pool: Any) -> None: ...
    def __del__(self) -> None: ...
    def close(self) -> None: ...

class Cursor:
    def __init__(
        self,
        collection: Any,
        filter: Optional[Any] = ...,
        projection: Optional[Any] = ...,
        skip: int = ...,
        limit: int = ...,
        no_cursor_timeout: bool = ...,
        cursor_type: Any = ...,
        sort: Optional[Any] = ...,
        allow_partial_results: bool = ...,
        oplog_replay: bool = ...,
        modifiers: Optional[Any] = ...,
        batch_size: int = ...,
        manipulate: bool = ...,
        collation: Optional[Any] = ...,
        hint: Optional[Any] = ...,
        max_scan: Optional[Any] = ...,
        max_time_ms: Optional[Any] = ...,
        max: Optional[Any] = ...,
        min: Optional[Any] = ...,
        return_key: bool = ...,
        show_record_id: bool = ...,
        snapshot: bool = ...,
        comment: Optional[Any] = ...,
        session: Optional[Any] = ...,
    ) -> None: ...
    @property
    def collection(self): ...
    @property
    def retrieved(self): ...
    def __del__(self) -> None: ...
    def rewind(self): ...
    def clone(self): ...
    def close(self) -> None: ...
    def add_option(self, mask: Any): ...
    def remove_option(self, mask: Any): ...
    def limit(self, limit: Any): ...
    def batch_size(self, batch_size: Any): ...
    def skip(self, skip: Any): ...
    def max_time_ms(self, max_time_ms: Any): ...
    def max_await_time_ms(self, max_await_time_ms: Any): ...
    def __getitem__(self, index: Any): ...
    def max_scan(self, max_scan: Any): ...
    def max(self, spec: Any): ...
    def min(self, spec: Any): ...
    def sort(self, key_or_list: Any, direction: Optional[Any] = ...): ...
    def count(self, with_limit_and_skip: bool = ...): ...
    def distinct(self, key: Any): ...
    def explain(self): ...
    def hint(self, index: Any): ...
    def comment(self, comment: Any): ...
    def where(self, code: Any): ...
    def collation(self, collation: Any): ...
    @property
    def alive(self): ...
    @property
    def cursor_id(self): ...
    @property
    def address(self): ...
    @property
    def session(self): ...
    def __iter__(self) -> Any: ...
    def next(self): ...
    __next__: Any = ...
    def __enter__(self): ...
    def __exit__(self, exc_type: Any, exc_val: Any, exc_tb: Any) -> None: ...
    def __copy__(self): ...
    def __deepcopy__(self, memo: Any): ...

class RawBatchCursor(Cursor):
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def explain(self): ...
    def __getitem__(self, index: Any) -> None: ...
