from typing import Any, Optional

from pymongo.errors import ConfigurationError as ConfigurationError
from pymongo.errors import EncryptionError as EncryptionError
from pymongo.errors import InvalidOperation as InvalidOperation
from pymongo.errors import ServerSelectionTimeoutError as ServerSelectionTimeoutError
from pymongo.mongo_client import MongoClient as MongoClient
from pymongo.pool import PoolOptions as PoolOptions
from pymongo.read_concern import ReadConcern as ReadConcern
from pymongo.ssl_support import get_ssl_context as get_ssl_context
from pymongo.uri_parser import parse_host as parse_host
from pymongo.write_concern import WriteConcern as WriteConcern

from pymongocrypt.errors import MongoCryptError as MongoCryptError
from pymongocrypt.state_machine import MongoCryptCallback

MongoCryptCallback = object

class _EncryptionIO(MongoCryptCallback):
    client_ref: Any = ...
    key_vault_coll: Any = ...
    mongocryptd_client: Any = ...
    opts: Any = ...
    def __init__(self, client: Any, key_vault_coll: Any, mongocryptd_client: Any, opts: Any) -> None: ...
    def kms_request(self, kms_context: Any) -> None: ...
    def collection_info(self, database: Any, filter: Any): ...
    def spawn(self) -> None: ...
    def mark_command(self, database: Any, cmd: Any): ...
    def fetch_keys(self, filter: Any) -> None: ...
    def insert_data_key(self, data_key: Any): ...
    def bson_encode(self, doc: Any): ...
    def close(self) -> None: ...

class _Encrypter:
    def __init__(self, io_callbacks: Any, opts: Any) -> None: ...
    def encrypt(self, database: Any, cmd: Any, check_keys: Any, codec_options: Any): ...
    def decrypt(self, response: Any): ...
    def close(self) -> None: ...
    @staticmethod
    def create(client: Any, opts: Any): ...

class Algorithm:
    AEAD_AES_256_CBC_HMAC_SHA_512_Deterministic: str = ...
    AEAD_AES_256_CBC_HMAC_SHA_512_Random: str = ...

class ClientEncryption:
    def __init__(
        self, kms_providers: Any, key_vault_namespace: Any, key_vault_client: Any, codec_options: Any
    ) -> None: ...
    def create_data_key(
        self, kms_provider: Any, master_key: Optional[Any] = ..., key_alt_names: Optional[Any] = ...
    ): ...
    def encrypt(self, value: Any, algorithm: Any, key_id: Optional[Any] = ..., key_alt_name: Optional[Any] = ...): ...
    def decrypt(self, value: Any): ...
    def __enter__(self): ...
    def __exit__(self, exc_type: Any, exc_val: Any, exc_tb: Any) -> None: ...
    def close(self) -> None: ...
